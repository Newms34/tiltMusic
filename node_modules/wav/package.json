{
  "name": "wav",
  "description": "`Reader` and `Writer` streams for Microsoft WAVE audio files",
  "version": "0.1.2",
  "author": {
    "name": "Nathan Rajlich",
    "email": "nathan@tootallnate.net"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/TooTallNate/node-wav.git"
  },
  "keywords": [],
  "dependencies": {
    "debug": "*",
    "readable-stream": "~1.1.10",
    "stream-parser": "~0.1.0"
  },
  "devDependencies": {
    "mocha": "*"
  },
  "main": "./index.js",
  "scripts": {
    "test": "mocha --reporter spec"
  },
  "engines": {
    "node": ">= v0.8.x"
  },
  "readme": "node-wav\n========\n### `Reader` and `Writer` streams for Microsoft WAVE audio files\n[![Build Status](https://secure.travis-ci.org/TooTallNate/node-wav.png)](http://travis-ci.org/TooTallNate/node-wav)\n\nThis module offers streams to help work with Microsoft WAVE files.\n\n\nInstallation\n------------\n\nInstall through npm:\n\n``` bash\n$ npm install wav\n```\n\n\nExample\n-------\n\nHere's how you would play a standard PCM WAVE file out of the speakers using\n`node-wav` and `node-speaker`:\n\n``` javascript\nvar fs = require('fs');\nvar wav = require('wav');\nvar Speaker = require('speaker');\n\nvar file = fs.createReadStream('track01.wav');\nvar reader = new wav.Reader();\n\n// the \"format\" event gets emitted at the end of the WAVE header\nreader.on('format', function (format) {\n\n  // the WAVE header is stripped from the output of the reader\n  reader.pipe(new Speaker(format));\n});\n\n// pipe the WAVE file to the Reader instance\nfile.pipe(reader);\n```\n\n\nAPI\n---\n\n  - [Reader()](#reader)\n  - [Writer()](#writer)\n  - [FileWriter()](#filewriter)\n\n## Reader()\n\nThe `Reader` class accepts a WAV audio file written to it and outputs the raw\naudio data with the WAV header stripped (most of the time, PCM audio data will\nbe output, depending on the `audioFormat` property).\n\nA `\"format\"` event gets emitted after the WAV header has been parsed.\n\n## Writer()\n\nThe `Writer` class accepts raw audio data written to it (only PCM audio data is\ncurrently supported), and outputs a WAV file with a valid WAVE header at the\nbeginning specifying the formatting information of the audio stream.\n\nNote that there's an interesting problem, because the WAVE header also\nspecifies the total byte length of the audio data in the file, and there's no\nway that we can know this ahead of time. Therefore the WAVE header will contain\na byte-length if `0` initially, which most WAVE decoders will know means to\njust read until `EOF`.\n\nOptionally, if you are in a situation where you can seek back to the beginning\nof the destination of the WAVE file (like writing to a regular file, for\nexample), then you may listen for the `\"header\"` event which will be emitted\n_after_ all the data has been written, and you can go back and rewrite the new\nheader with proper audio byte length into the beginning of the destination\n(though if your destination _is_ a regular file, you should use the the\n`FileWriter` class instead).\n\n## FileWriter()\n\nThe `FileWriter` class.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/TooTallNate/node-wav/issues"
  },
  "homepage": "https://github.com/TooTallNate/node-wav",
  "_id": "wav@0.1.2",
  "dist": {
    "shasum": "33bfb4f3d9e84be99fd8091e356657499d23b871",
    "tarball": "http://registry.npmjs.org/wav/-/wav-0.1.2.tgz"
  },
  "_from": "wav@*",
  "_npmVersion": "1.3.21",
  "_npmUser": {
    "name": "tootallnate",
    "email": "nathan@tootallnate.net"
  },
  "maintainers": [
    {
      "name": "tootallnate",
      "email": "nathan@tootallnate.net"
    }
  ],
  "directories": {},
  "_shasum": "33bfb4f3d9e84be99fd8091e356657499d23b871",
  "_resolved": "https://registry.npmjs.org/wav/-/wav-0.1.2.tgz"
}
